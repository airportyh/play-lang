def main() [
    clear()
    setFont("100px sans-serif")
    while true [
        playGame()
        drawText("Click to play again", 0, 400)
        waitForEvent("click")
    ]
]

def playGame() [
    clear()
    currentPlayer = "O"
    gameOver = false
    board = [
        "", "", "", 
        "", "", "",
        "", "", ""
    ]
    drawBoard(board)

    while true [
        humanMove(board, currentPlayer)
        
        if isWinner(board, currentPlayer) [
            setFont("60px sans-serif")
            drawText("The winner is " + currentPlayer, 0, 0)
            gameOver = true
        ] else [
            currentPlayer = switchPlayer(currentPlayer)
        ]
        
        if gameOver [
            break
        ]
        
        if isDraw(board) [
            gameOver = true
            setFont("60px sans-serif")
            drawText("It's a draw", 0, 0)
            break
        ]
        
        sleep(1)
        
        # Computer moves
        smartComputer(board, currentPlayer)
        if isWinner(board, currentPlayer) [
            setFont("60px sans-serif")
            drawText("The winner is " + currentPlayer, 0, 0)
            gameOver = true
        ] else [
            currentPlayer = switchPlayer(currentPlayer)
        ]
        
        if gameOver [
            break
        ]
        
    ]
]

def humanMove(board, currentPlayer) [
    while true [
        click = waitForEvent("click")
        x = click["x"]
        y = click["y"]
        
        i = 0
        while i < 9 [
            sx = getX(i)
            sy = getY(i)
            state = board[i]
            if x > sx and x < sx + 90 and y > sy and y < sy + 90 [
                if state == "" [
                    board[i] = currentPlayer
                    setFont("100px sans-serif")
                    setColor("black")
                    drawText(currentPlayer, sx + 5, sy)
                    return
                ]
            ]
            i = i + 1
        ]
    ]
]

def naiveComputer(board, currentPlayer) [
    # choose a random open square

    openSquares = []
    i = 0
    while i < 9 [
        state = board[i]
        if state == "" [
            push(openSquares, i)
        ]
        i = i + 1
    ]
    idx = floor(random() * length(openSquares))
    choice = openSquares[idx]
    board[choice] = currentPlayer
    sx = 100 + floor(choice / 3) * 100
    sy = 100 + (choice % 3) * 100
    drawText(currentPlayer, sx + 5, sy)
]

def notDumbComputer(board, me) [
    # If I can win, win it
    i = 0
    while i < 9 [
        sx = getX(i)
        sy = getY(i)
        state = board[i]
        if state == "" [
            # try taking this square and see if I win
            board[i] = me
            if isWinner(board, me) [
                drawText(me, sx + 5, sy)
                return
            ] else [
                # Revert the move
                board[i] = ""
            ]
        ]
        i = i + 1
    ]
    
    # If they can win, block it
    i = 0
    while i < 9 [
        sx = getX(i)
        sy = getY(i)
        state = board[i]
        if state == "" [
            # try letting them take this square
            opponent = switchPlayer(me)
            board[i] = opponent
            if isWinner(board, opponent) [
                board[i] = me
                drawText(me, sx + 5, sy)
                return
            ] else [
                # Revert the move
                board[i] = ""
            ]
        ]
        i = i + 1
    ]
    
    # Default to naive completer
    naiveComputer(board, me)
]

def smartComputer(board, me) [
    result = smartComputerCalculateMove(board, me, 6, false)
    move = result["move"]
    board[move] = me
    sx = getX(move)
    sy = getY(move)
    drawText(me, sx + 5, sy)
]

# Score is either 0 - losing, 1 - even, or 2 - winning
def smartComputerCalculateMove(board, me, depth, min) [
    if isWinner(board, "X") [
        return { move: null, score: 2 }
    ]
    if isWinner(board, "O") [
        return { move: null, score: 0 }
    ]
    if depth == 0 [
        return smartComputerRandomMove(board, me)
    ]
    
    bestScore = null
    if min [
        bestScore = 3
    ] else [
        bestScore = -1
    ]
    bestMove = null
    opponent = switchPlayer(me)
    i = 0
    while i < 9 [
        if board[i] == "" [
            newBoard = imagineMove(board, i, me)
            result = smartComputerCalculateMove(newBoard, opponent, depth - 1, !min)
            
            if min [
                if result["score"] < bestScore [
                    bestScore = result["score"]
                    bestMove = i
                ]
            ] else [
                if result["score"] > bestScore [
                    bestScore = result["score"]
                    bestMove = i
                ]
            ]
        ]
        i = i + 1
    ]
    
    if bestScore == -1 [
        return smartComputerRandomMove(board, me)
    ] else [
        return { move: bestMove, score: bestScore }
    ]
]

def smartComputerRandomMove(board, me) [
    openSquares = []
    i = 0
    while i < 9 [
        state = board[i]
        if state == "" [
            push(openSquares, i)
        ]
        i = i + 1
    ]
    idx = floor(random() * length(openSquares))
    return { move: openSquares[idx], score: 1 }
]

def imagineMove(board, move, player) [
    newBoard = []
    i = 0
    while i < 9 [
        if i == move [
            push(newBoard, player)
        ] else [
            push(newBoard, board[i])
        ]
        i = i + 1
    ]
    return newBoard
]

def getX(i) [
    return 100 + (i % 3) * 100
]

def getY(i) [
    return 100 + floor(i / 3) * 100
]

def isDraw(board) [
    for state in board [
        if state == "" [
            return false
        ]
    ]
    return true
]

def isWinner(board, player) [
    zero = board[0] == player
    one = board[1] == player
    two = board[2] == player
    three = board[3] == player
    four = board[4] == player
    five = board[5] == player
    six = board[6] == player
    seven = board[7] == player
    eight = board[8] == player
    a = zero and one and two
    b = three and four and five
    c = six and seven and eight
    d = zero and four and eight
    e = two and four and six
    f = zero and three and six
    g = one and four and seven
    h = two and five and eight
    return a or b or c or d or e or f or g or h
]

def switchPlayer(player) [
    if player == "O" [
        return "X"
    ] else [
        return "O"
    ]
]

def drawBoard(board) [
    setColor("#dddddd")

    i = 0
    while i < 9 [
        x = getX(i)
        y = getY(i)
        fillRect(x, y, 90, 90)
        i = i + 1
    ]
]